// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: broker.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignalTypeEnum int32

const (
	SignalTypeEnum_PartnerExit SignalTypeEnum = 0
	SignalTypeEnum_NewSession  SignalTypeEnum = 1
	SignalTypeEnum_DeleteMsg   SignalTypeEnum = 2
	SignalTypeEnum_ViewedAck   SignalTypeEnum = 3
)

var SignalTypeEnum_name = map[int32]string{
	0: "PartnerExit",
	1: "NewSession",
	2: "DeleteMsg",
	3: "ViewedAck",
}

var SignalTypeEnum_value = map[string]int32{
	"PartnerExit": 0,
	"NewSession":  1,
	"DeleteMsg":   2,
	"ViewedAck":   3,
}

func (x SignalTypeEnum) String() string {
	return proto.EnumName(SignalTypeEnum_name, int32(x))
}

func (SignalTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{0}
}

type HealthCheckReq struct {
	Asker                string   `protobuf:"bytes,1,opt,name=asker,proto3" json:"asker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckReq) Reset()         { *m = HealthCheckReq{} }
func (m *HealthCheckReq) String() string { return proto.CompactTextString(m) }
func (*HealthCheckReq) ProtoMessage()    {}
func (*HealthCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{0}
}
func (m *HealthCheckReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckReq.Merge(m, src)
}
func (m *HealthCheckReq) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckReq.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckReq proto.InternalMessageInfo

func (m *HealthCheckReq) GetAsker() string {
	if m != nil {
		return m.Asker
	}
	return ""
}

type HealthCheckResp struct {
	Code                 CodeEnum `protobuf:"varint,1,opt,name=code,proto3,enum=proto.CodeEnum" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckResp) Reset()         { *m = HealthCheckResp{} }
func (m *HealthCheckResp) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResp) ProtoMessage()    {}
func (*HealthCheckResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{1}
}
func (m *HealthCheckResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResp.Merge(m, src)
}
func (m *HealthCheckResp) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResp.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResp proto.InternalMessageInfo

func (m *HealthCheckResp) GetCode() CodeEnum {
	if m != nil {
		return m.Code
	}
	return CodeEnum_C000
}

func (m *HealthCheckResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PushRequest struct {
	AccountId            uint64   `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{2}
}
func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type PushResp struct {
	Code                 CodeEnum `protobuf:"varint,1,opt,name=code,proto3,enum=proto.CodeEnum" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushResp) Reset()         { *m = PushResp{} }
func (m *PushResp) String() string { return proto.CompactTextString(m) }
func (*PushResp) ProtoMessage()    {}
func (*PushResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{3}
}
func (m *PushResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushResp.Merge(m, src)
}
func (m *PushResp) XXX_Size() int {
	return m.Size()
}
func (m *PushResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PushResp.DiscardUnknown(m)
}

var xxx_messageInfo_PushResp proto.InternalMessageInfo

func (m *PushResp) GetCode() CodeEnum {
	if m != nil {
		return m.Code
	}
	return CodeEnum_C000
}

func (m *PushResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PushDialogue struct {
	SenderId             uint64   `protobuf:"varint,1,opt,name=senderId,proto3" json:"senderId,omitempty"`
	SessionId            uint64   `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	ReceiverId           uint64   `protobuf:"varint,3,opt,name=receiverId,proto3" json:"receiverId,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	MsgId                uint64   `protobuf:"varint,5,opt,name=msgId,proto3" json:"msgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushDialogue) Reset()         { *m = PushDialogue{} }
func (m *PushDialogue) String() string { return proto.CompactTextString(m) }
func (*PushDialogue) ProtoMessage()    {}
func (*PushDialogue) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{4}
}
func (m *PushDialogue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushDialogue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushDialogue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushDialogue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushDialogue.Merge(m, src)
}
func (m *PushDialogue) XXX_Size() int {
	return m.Size()
}
func (m *PushDialogue) XXX_DiscardUnknown() {
	xxx_messageInfo_PushDialogue.DiscardUnknown(m)
}

var xxx_messageInfo_PushDialogue proto.InternalMessageInfo

func (m *PushDialogue) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *PushDialogue) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PushDialogue) GetReceiverId() uint64 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

func (m *PushDialogue) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PushDialogue) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type PushSignal struct {
	SignalType SignalTypeEnum `protobuf:"varint,1,opt,name=signalType,proto3,enum=proto.SignalTypeEnum" json:"signalType,omitempty"`
	SenderId   uint64         `protobuf:"varint,2,opt,name=senderId,proto3" json:"senderId,omitempty"`
	ReceiverId uint64         `protobuf:"varint,3,opt,name=receiverId,proto3" json:"receiverId,omitempty"`
	SessionId  uint64         `protobuf:"varint,4,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*PushSignal_Partner
	//	*PushSignal_MsgId
	//	*PushSignal_AccountId
	Data                 isPushSignal_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PushSignal) Reset()         { *m = PushSignal{} }
func (m *PushSignal) String() string { return proto.CompactTextString(m) }
func (*PushSignal) ProtoMessage()    {}
func (*PushSignal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{5}
}
func (m *PushSignal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSignal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSignal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSignal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSignal.Merge(m, src)
}
func (m *PushSignal) XXX_Size() int {
	return m.Size()
}
func (m *PushSignal) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSignal.DiscardUnknown(m)
}

var xxx_messageInfo_PushSignal proto.InternalMessageInfo

type isPushSignal_Data interface {
	isPushSignal_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PushSignal_Partner struct {
	Partner *AccountInfo `protobuf:"bytes,5,opt,name=partner,proto3,oneof" json:"partner,omitempty"`
}
type PushSignal_MsgId struct {
	MsgId uint64 `protobuf:"varint,6,opt,name=msgId,proto3,oneof" json:"msgId,omitempty"`
}
type PushSignal_AccountId struct {
	AccountId uint64 `protobuf:"varint,7,opt,name=accountId,proto3,oneof" json:"accountId,omitempty"`
}

func (*PushSignal_Partner) isPushSignal_Data()   {}
func (*PushSignal_MsgId) isPushSignal_Data()     {}
func (*PushSignal_AccountId) isPushSignal_Data() {}

func (m *PushSignal) GetData() isPushSignal_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushSignal) GetSignalType() SignalTypeEnum {
	if m != nil {
		return m.SignalType
	}
	return SignalTypeEnum_PartnerExit
}

func (m *PushSignal) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *PushSignal) GetReceiverId() uint64 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

func (m *PushSignal) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PushSignal) GetPartner() *AccountInfo {
	if x, ok := m.GetData().(*PushSignal_Partner); ok {
		return x.Partner
	}
	return nil
}

func (m *PushSignal) GetMsgId() uint64 {
	if x, ok := m.GetData().(*PushSignal_MsgId); ok {
		return x.MsgId
	}
	return 0
}

func (m *PushSignal) GetAccountId() uint64 {
	if x, ok := m.GetData().(*PushSignal_AccountId); ok {
		return x.AccountId
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PushSignal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PushSignal_Partner)(nil),
		(*PushSignal_MsgId)(nil),
		(*PushSignal_AccountId)(nil),
	}
}

type AccountInfo struct {
	AccountId            uint64   `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{6}
}
func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

func (m *AccountInfo) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AccountInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.SignalTypeEnum", SignalTypeEnum_name, SignalTypeEnum_value)
	proto.RegisterType((*HealthCheckReq)(nil), "proto.HealthCheckReq")
	proto.RegisterType((*HealthCheckResp)(nil), "proto.HealthCheckResp")
	proto.RegisterType((*PushRequest)(nil), "proto.PushRequest")
	proto.RegisterType((*PushResp)(nil), "proto.PushResp")
	proto.RegisterType((*PushDialogue)(nil), "proto.PushDialogue")
	proto.RegisterType((*PushSignal)(nil), "proto.PushSignal")
	proto.RegisterType((*AccountInfo)(nil), "proto.AccountInfo")
}

func init() { proto.RegisterFile("broker.proto", fileDescriptor_f209535e190f2bed) }

var fileDescriptor_f209535e190f2bed = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x13, 0x27, 0x69, 0xc6, 0x25, 0x31, 0x0b, 0x54, 0x56, 0x84, 0x2c, 0x64, 0x24, 0x84,
	0x40, 0xca, 0x21, 0x08, 0x0e, 0x88, 0x4b, 0xd2, 0x56, 0x24, 0x87, 0x96, 0xca, 0x41, 0xdc, 0x5d,
	0x7b, 0x70, 0x2c, 0x3b, 0xbb, 0xae, 0x77, 0x4d, 0xe1, 0x21, 0xb8, 0xf7, 0x59, 0x78, 0x02, 0x8e,
	0x3c, 0x02, 0x0a, 0x2f, 0x82, 0xbc, 0xfe, 0x89, 0x1d, 0x10, 0x48, 0x3d, 0xd9, 0xf3, 0xed, 0xcc,
	0xb7, 0xdf, 0x37, 0x33, 0x0b, 0x87, 0x97, 0x09, 0x0b, 0x31, 0x99, 0xc4, 0x09, 0x13, 0x8c, 0x74,
	0xe5, 0x67, 0xac, 0x45, 0xcc, 0x0f, 0xdc, 0x1c, 0xb3, 0x9e, 0xc0, 0x70, 0x81, 0x4e, 0x24, 0xd6,
	0xc7, 0x6b, 0x74, 0x43, 0x1b, 0xaf, 0xc8, 0x7d, 0xe8, 0x3a, 0x3c, 0xc4, 0xc4, 0x50, 0x1e, 0x29,
	0x4f, 0x07, 0x76, 0x1e, 0x58, 0x0b, 0x18, 0x35, 0xf2, 0x78, 0x4c, 0x1e, 0x83, 0xea, 0x32, 0x0f,
	0x65, 0xde, 0x70, 0x3a, 0xca, 0x09, 0x27, 0xc7, 0xcc, 0xc3, 0x53, 0x9a, 0x6e, 0x6c, 0x79, 0x48,
	0x74, 0xe8, 0x6c, 0xb8, 0x6f, 0xb4, 0x25, 0x57, 0xf6, 0x6b, 0x3d, 0x07, 0xed, 0x22, 0xe5, 0x6b,
	0x1b, 0xaf, 0x52, 0xe4, 0x82, 0x3c, 0x84, 0x81, 0xe3, 0xba, 0x2c, 0xa5, 0x62, 0xe9, 0x49, 0x2a,
	0xd5, 0xde, 0x01, 0xd6, 0x0c, 0x0e, 0xf2, 0xe4, 0xdb, 0xdf, 0x77, 0xa3, 0xc0, 0x61, 0xc6, 0x71,
	0x12, 0x38, 0x11, 0xf3, 0x53, 0x24, 0x63, 0x38, 0xe0, 0x48, 0x3d, 0x4c, 0xaa, 0x0b, 0xab, 0x38,
	0x53, 0xc3, 0x91, 0xf3, 0x80, 0xd1, 0xa5, 0x27, 0x49, 0x54, 0x7b, 0x07, 0x10, 0x13, 0x20, 0x41,
	0x17, 0x83, 0x4f, 0xb2, 0xb6, 0x23, 0x8f, 0x6b, 0x08, 0x31, 0xa0, 0xef, 0x32, 0x2a, 0x90, 0x0a,
	0x43, 0x95, 0x02, 0xca, 0x30, 0x6b, 0xea, 0x86, 0xfb, 0x4b, 0xcf, 0xe8, 0xca, 0xa2, 0x3c, 0xb0,
	0xbe, 0xb6, 0x01, 0x32, 0x69, 0xab, 0xc0, 0xa7, 0x4e, 0x44, 0x5e, 0x02, 0x70, 0xf9, 0xf7, 0xfe,
	0x4b, 0x5c, 0xda, 0x7c, 0x50, 0xd8, 0x5c, 0x55, 0x07, 0xd2, 0x6c, 0x2d, 0xb1, 0xe1, 0xa7, 0xbd,
	0xe7, 0xe7, 0x7f, 0x8a, 0x1b, 0x7e, 0xd5, 0x7d, 0xbf, 0x13, 0xe8, 0xc7, 0x4e, 0x22, 0x28, 0x26,
	0x52, 0xb7, 0x36, 0x25, 0x85, 0x9a, 0x59, 0x31, 0x20, 0xfa, 0x91, 0x2d, 0x5a, 0x76, 0x99, 0x44,
	0x8e, 0x4a, 0x97, 0xbd, 0x8c, 0x69, 0xd1, 0x2a, 0x7c, 0x12, 0xb3, 0x3e, 0xe3, 0x7e, 0x71, 0xb6,
	0x83, 0xe6, 0x3d, 0x50, 0x3d, 0x47, 0x38, 0xd6, 0x5b, 0xd0, 0x6a, 0xcc, 0xff, 0x5e, 0x8d, 0xcc,
	0x36, 0x0d, 0xdc, 0xf0, 0xdc, 0xd9, 0x60, 0x31, 0xee, 0x2a, 0x7e, 0xf6, 0x0e, 0x86, 0xcd, 0x86,
	0x91, 0x11, 0x68, 0x17, 0xb9, 0xca, 0xd3, 0xcf, 0x81, 0xd0, 0x5b, 0x64, 0x08, 0x70, 0x8e, 0xd7,
	0xab, 0xdc, 0xab, 0xae, 0x90, 0x3b, 0x30, 0x38, 0xc1, 0x08, 0x05, 0x9e, 0x71, 0x5f, 0x6f, 0x67,
	0xe1, 0x87, 0x00, 0xaf, 0xd1, 0x9b, 0xb9, 0xa1, 0xde, 0x99, 0x7e, 0x53, 0xa0, 0x37, 0x97, 0x6f,
	0x89, 0xbc, 0x06, 0x62, 0xe7, 0x0d, 0x3c, 0xe3, 0x7e, 0xb5, 0x54, 0xf7, 0x8a, 0xce, 0xd4, 0x37,
	0x6d, 0x3c, 0xaa, 0x81, 0x72, 0x85, 0x5f, 0x81, 0xbe, 0xab, 0x2d, 0xa6, 0x7e, 0xb7, 0x96, 0x94,
	0x43, 0x7f, 0xd6, 0xbd, 0x01, 0xad, 0xf6, 0xfa, 0x48, 0xb9, 0x14, 0xcd, 0x97, 0x3b, 0x3e, 0xfa,
	0x1b, 0xcc, 0xe3, 0xb9, 0xfe, 0x7d, 0x6b, 0x2a, 0x3f, 0xb6, 0xa6, 0xf2, 0x73, 0x6b, 0x2a, 0x37,
	0xbf, 0xcc, 0xd6, 0x65, 0x4f, 0x26, 0xbe, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x96, 0x3e,
	0xd6, 0x20, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrokerClient interface {
	// 接收logic推送过来的数据
	ReceiveMsgDialogue(ctx context.Context, in *PushDialogue, opts ...grpc.CallOption) (*PushResp, error)
	ReceiveMsgSignal(ctx context.Context, in *PushSignal, opts ...grpc.CallOption) (*PushResp, error)
	HealthCheck(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckResp, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) ReceiveMsgDialogue(ctx context.Context, in *PushDialogue, opts ...grpc.CallOption) (*PushResp, error) {
	out := new(PushResp)
	err := c.cc.Invoke(ctx, "/proto.Broker/ReceiveMsgDialogue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) ReceiveMsgSignal(ctx context.Context, in *PushSignal, opts ...grpc.CallOption) (*PushResp, error) {
	out := new(PushResp)
	err := c.cc.Invoke(ctx, "/proto.Broker/ReceiveMsgSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) HealthCheck(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckResp, error) {
	out := new(HealthCheckResp)
	err := c.cc.Invoke(ctx, "/proto.Broker/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
type BrokerServer interface {
	// 接收logic推送过来的数据
	ReceiveMsgDialogue(context.Context, *PushDialogue) (*PushResp, error)
	ReceiveMsgSignal(context.Context, *PushSignal) (*PushResp, error)
	HealthCheck(context.Context, *HealthCheckReq) (*HealthCheckResp, error)
}

// UnimplementedBrokerServer can be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (*UnimplementedBrokerServer) ReceiveMsgDialogue(ctx context.Context, req *PushDialogue) (*PushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMsgDialogue not implemented")
}
func (*UnimplementedBrokerServer) ReceiveMsgSignal(ctx context.Context, req *PushSignal) (*PushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMsgSignal not implemented")
}
func (*UnimplementedBrokerServer) HealthCheck(ctx context.Context, req *HealthCheckReq) (*HealthCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_ReceiveMsgDialogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDialogue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).ReceiveMsgDialogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Broker/ReceiveMsgDialogue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).ReceiveMsgDialogue(ctx, req.(*PushDialogue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_ReceiveMsgSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSignal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).ReceiveMsgSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Broker/ReceiveMsgSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).ReceiveMsgSignal(ctx, req.(*PushSignal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Broker/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).HealthCheck(ctx, req.(*HealthCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMsgDialogue",
			Handler:    _Broker_ReceiveMsgDialogue_Handler,
		},
		{
			MethodName: "ReceiveMsgSignal",
			Handler:    _Broker_ReceiveMsgSignal_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Broker_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}

func (m *HealthCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCheckReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Asker) > 0 {
		i -= len(m.Asker)
		copy(dAtA[i:], m.Asker)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Asker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthCheckResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCheckResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushDialogue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushDialogue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushDialogue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReceiverId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.ReceiverId))
		i--
		dAtA[i] = 0x18
	}
	if m.SessionId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.SenderId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushSignal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSignal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSignal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SessionId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x20
	}
	if m.ReceiverId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.ReceiverId))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x10
	}
	if m.SignalType != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.SignalType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushSignal_Partner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSignal_Partner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Partner != nil {
		{
			size, err := m.Partner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBroker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PushSignal_MsgId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSignal_MsgId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintBroker(dAtA, i, uint64(m.MsgId))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *PushSignal_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSignal_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintBroker(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *AccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBroker(dAtA []byte, offset int, v uint64) int {
	offset -= sovBroker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HealthCheckReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asker)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthCheckResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBroker(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovBroker(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBroker(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushDialogue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderId != 0 {
		n += 1 + sovBroker(uint64(m.SenderId))
	}
	if m.SessionId != 0 {
		n += 1 + sovBroker(uint64(m.SessionId))
	}
	if m.ReceiverId != 0 {
		n += 1 + sovBroker(uint64(m.ReceiverId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovBroker(uint64(m.MsgId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushSignal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalType != 0 {
		n += 1 + sovBroker(uint64(m.SignalType))
	}
	if m.SenderId != 0 {
		n += 1 + sovBroker(uint64(m.SenderId))
	}
	if m.ReceiverId != 0 {
		n += 1 + sovBroker(uint64(m.ReceiverId))
	}
	if m.SessionId != 0 {
		n += 1 + sovBroker(uint64(m.SessionId))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushSignal_Partner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Partner != nil {
		l = m.Partner.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *PushSignal_MsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBroker(uint64(m.MsgId))
	return n
}
func (m *PushSignal_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBroker(uint64(m.AccountId))
	return n
}
func (m *AccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovBroker(uint64(m.AccountId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBroker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBroker(x uint64) (n int) {
	return sovBroker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HealthCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CodeEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CodeEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushDialogue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushDialogue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushDialogue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverId", wireType)
			}
			m.ReceiverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSignal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSignal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSignal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalType", wireType)
			}
			m.SignalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignalType |= SignalTypeEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverId", wireType)
			}
			m.ReceiverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccountInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &PushSignal_Partner{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &PushSignal_MsgId{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &PushSignal_AccountId{v}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBroker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBroker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBroker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBroker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBroker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBroker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBroker = fmt.Errorf("proto: unexpected end of group")
)
